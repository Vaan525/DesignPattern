Singleton Pattern

싱글톤의 목적은 하나의 인스턴스를 메모리에 올리고 공유를 하는 개념
즉, 인스턴스가 하나만 생성이 된다.

* 싱글턴 패턴을 사용시 동시성(Concurrency)문제를 고려하여 작성할것

싱글턴 패턴은 자바와 스프링 2가지가 있다. (?)

공통적인 특징은 private constructor를 가지며 static method를 사용
싱글턴패턴의 핵심은 여러 스레드가 하나의 인스턴스에 접근을 할경우에 Thread-safe가 보장이 되어야 합니다.
static이 중요한 이유도 여러 스레드가 하나의 인스턴스로 동시에 혹은 다른 작업을 진행하 경우
결과값이 달라질 가능성이 충분히 높다. 고로 같은 데이터를 공유하되 Thread-safe가 보장이 되어야 한다.

EagerInitialization(이른 초기화)
	* vaan.design.singleton.SingletonEagerInitialization 파일 참조
	static 키워드의 특징, 모든객체가 공유를 하는, 정적변수의 특징을 사용
	싱글톤의 목적이 하나의 인스턴스를 공유하는 개념이기에 static 키워드의 특징과 유사하다고 볼수 있나(?)
	클래스로더가 메모리상에 올라갈때 인트턴스도 같이 메모리에 올리는 방식
	
Lazy Initialization with synchronized (동기화 블럭, Thread-safe)
	* vaan.design.singleton.LazyInitializationWithSynchronized 파일 참조
	이른 초기화와 달리 메서드에 동기화 블럭을 지정해서 Thread-safe를 보정 < 뭔소린지
	→ 클래스로더와 같이 인스턴스가 메모리에 올라가는 방식이 아닌 필요한 시점에 요청을하여
	동적 바인딩(들어갈 주소의 4Byte를 가지고 있는상태)을 통해 인스턴스를 생성

DCL Thread-safe(Double Checking Locking)
위의 2가지 방식을 개선한 방식
	위의 2가지의 경우와 반대로 인스턴스가 생성되지 않을 경우 동기화 블럭을 실행시킨다.
	→ 


[짜투리 정보]
(static 키워드 정리)
1. static이 붙은 변수들은 객체들이 다 같이 공유하는 데이터를 의미한다.
static이 붙은 변수는 운영하는 사이트의 통계자료와 같이 직원과 사용자가 공유하는 데이터가 된다.
번호표를 주는 로직에서 번호에 static을 주고 A사람과 B사람이 받는다면, A와 B는 서로 자기가 1번이라고 주장하는
모순이 생기는데, 이럴때 각각의 객체(A와B)가 데이터를 공유한다면 이러한 상황을 피할 수 있다. 

2. static이 붙은 메소드들은 객체들의 데이터와 관계없는 완벽하게 공통적인 로직을 정의할 때 사용한다.
3번의 객체를 가질수 없는 법칙때문에 객체의 메소드로 호출되는 함수의 동작방법이 매번 동일하다. 

3. 따라서 static 메소드에서는 인스턴스 변수나 객체의 메소드를 사용할 수 없다.
static이 붙은 메소드를 사용하는 이유는 객체과의 관계를 안가지기 위해서, 공유하는 메소드가 
같은 과정과 결과값을 바라봐야되기 때문. 컴파일 시스템적으로 static이 붙은 메소드 내에서의 객체 데이터의 사용이
불가능하다.

static 변수는 클래스가 메모리상에 올라갈때 같이 올라간다.

(Thread-safe)
멀티 스레드 프로그래밍 환경에서 특정한 메소드나 변수혹은 객체에 여러 스레드로부터의 개입이나 접근이 이루어질시
프로그램에 이상이 없도록 보장을 해주는것.

(동적 바인딩 & 정적 바인딩)
함수를 호출하는 부분에는 그 함수가 저장된 메모리 번지수(주소값)이 저장된다.
	→ 함수가 메모리에 올라갔던 주소 
프로그램 실행 → 함수 호출 → 함수가 저장된 주소로 점프 → 함수 실행 → 원래 위치
위 과정에서 함수를 호출하는 부분에 함수가 위치한 메모리 번지로 연결시켜 주는 것을 바인딩(Binding) 이라고 한다.
	→ 실행하고자 하는 함수의 주소부분의 메모리로 이동 및 연결

일반 함수, 정적 바인딩
호출되는 메소드의 메모리 주소가 결정되어 바인딩이 된다.

가상 함수, 동적 바인딩
정적 바인딩과 달리 바인딩 상태가 아닌 보류 상태에 있다.
바인딩 될 메소드의 주소를 저장하기 위한 4Byte의 공간을 가지고 있다가 런타임에 결정
단점 : 수행 속도 저하 / 메모리 공간 낭비
장점 : 유연성, 참조되는 인스턴스에 따른 수정된 메소드 호출이 가능(메모리에 주소가 결정전이라서)






[출처 링크]
출처: https://secretroute.tistory.com/entry/140819 [Empty]
출처: https://devbox.tistory.com/entry/Java-static [장인개발자를 꿈꾸는 :: 기록하는 공간]
참고 인터넷 링크 http://www.nextree.co.kr/p6960/